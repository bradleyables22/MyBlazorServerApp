@page "/guests"
@using MyBlazorServerApp.Controllers
@using MyBlazorServerApp.Data.Models
@inherits OwningComponentBase<GuestEntriesController>
@inject Controllers.GuestEntriesController entriesController

<div class="container g-0 justify-content-center align-items-center center-text p-5">
    <div class="row g-0">
        <div class="col-lg-12 f-size-3 f-white">
            <p>Welcome to my guest book!</p>
            <div class="f-mini-2">Feel free to leave a comment, shout-out, and of course constructive feedback!</div>
            <div class="f-mini-1">Inapproprate comments will be removed.</div>
            <button class="btn btn-primary shadow btn-lg" @onclick="ShowEntryForm">
                    <i class="far fa-comments"> Sign The Guestbook </i> 
            </button>
        </div>
    </div>
</div>
@if (entryToggler == Toggle.On)
{
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Sign the Guestbook</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEntryForm"></button>
                </div>
                <div class="modal-body">
                    <div class="modal-body">
                        <input type="text" placeholder="What's your name?" @bind="name" style="width:90%;">
                    </div>
                    <div class="modal-body" style="width:90%;">
                        <textarea placeholder="Please leave a message." @bind="input" style="width:90%;"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseEntryForm">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateNewEntry">Add Entry</button>
                </div>
                @if (responseToggler == Toggle.On)
                {
                    <div class="modal-footer justify-content-center align-items-center bg-warning">
                    <div class="center-text warner f-white">
                        <p>Oops! Your either left something blank or something went wrong.</p>
                    </div>
                </div>
                }
            </div>
        </div>
    </div>
}


<div class="container g-0 min-vh-90 justify-content-center align-items-center overflow-auto" >
    @foreach (var entry in entriesList)
    {
        <div class="col-lg-6 d-inline-flex flex-column p-5 justify-content-center">
            <div class="card shadow-no-hover m-5px">
                <div class="card-body">
                    <p class="card-text">@entry.GuestInput</p>
                    <div class="card-footer" style="text-align:right;">
                        <p>&#8211 @entry.GuestName</p>
                    </div>
                </div>
            </div>
        </div>
    } 
</div>

@code {
    //List of current entries filled on initialized
    public List<GuestEntry> entriesList = new List<GuestEntry>();

    //Base Toggler
    public enum Toggle {On,Off};

    //Toggle for return on entry success of fail handling.
    public Toggle responseToggler = Toggle.Off;
    //Toggle the entry form on & off
    public Toggle entryToggler = Toggle.Off;

    //Entry inputs
    private string name = "";
    private string input = "";


    protected override async Task OnInitializedAsync()
    {
        entriesList = await entriesController.GetGuestEntryAsync();        
    }

    private void ShowEntryForm()
    {
        entryToggler = Toggle.On;

    }

    private void CloseEntryForm()
    {
        entryToggler = Toggle.Off;
    }
    private async void HotReload()
    {
        //Reset string and toggle
        name = string.Empty;
        input = string.Empty;
        entryToggler = Toggle.Off;

        //Reload list
        entriesList = await entriesController.GetGuestEntryAsync();
    }
    private async Task CreateNewEntry()
    {
        //GuestEntry modal for new entries
        GuestEntry newEntry = new GuestEntry();
        newEntry.GuestEntryID = 0;//This will never change
        newEntry.GuestName = name;
        newEntry.GuestInput = input;
        newEntry.EntryTimeDate = DateTime.Now;

        //check to make sure no nulls
        if (newEntry.GuestName == "" | newEntry.GuestName == string.Empty | newEntry.GuestInput == "" | newEntry.GuestInput == string.Empty)
        {
            responseToggler = Toggle.On; //Handling of empty values
            name = "";
            input = "";
        }
        else
        {
            bool successResponse = false;

            //Send create method and await bool successResponse
            successResponse = await entriesController.CreateEntryAsync(newEntry);
            if (successResponse)
            {
                responseToggler = Toggle.Off;
                CloseEntryForm();
                HotReload(); 
            }
            else {responseToggler = Toggle.On;}
        }
    }
}
